let lastUpdate=new Date(2e3,1,1),savingRestaurants=!1;class DBHelper{static get DATABASE_URL(){return`http://localhost:${1337}/`}static getRestaurants(a){DBHelper.loadIdbStore('restaurants').then(b=>{return b&&b.length?(a(null,b),!1):!0}).then(b=>b&&DBHelper.fetchFromNetwork('restaurants')).then(b=>b&&a(null,b)).catch(b=>a(b,null))}static getOneRestaurant(a){return DBHelper.loadIdbStore('restaurants',a).then(b=>{return b?Promise.resolve(b):DBHelper.fetchFromNetwork('restaurants',`/${a}`)}).then(b=>console.log(b)).catch(b=>console.log('Error getting one restaurant',b))}static fetchFromNetwork(a,b=''){const c=DBHelper.DATABASE_URL+a+b;return fetch(c).then(d=>d.json()).then(d=>{return DBHelper.saveIdbStore(a,d),d}).catch(d=>console.log('DBHelper Error fetching from network',a,b,d))}static fetchRestaurantById(a,b){DBHelper.getRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.find(f=>f.id==a);e&&!e.reviews?DBHelper.getReviewsById(e.id).then(f=>{e.reviews=f,b(null,e)}):b('Restaurant does not exist',null)}})}static getReviewsById(a){return DBHelper.loadIdbStore('reviews').then(b=>{return 0<b.length&&navigator.onLine?(DBHelper.fetchFromNetwork('reviews',`/?restaurant_id=${a}`),b):navigator.onLine?DBHelper.fetchFromNetwork('reviews',`/?restaurant_id=${a}`):DBHelper.loadIdbStore('outbox').then(c=>b.concat(c))}).then(b=>b.filter(c=>c.restaurant_id===a)).catch(b=>console.log('Error getting reviews',b))}static saveNewReview(a){return navigator.onLine?DBHelper.saveToNetwork('reviews','POST',a).then(b=>{return console.log('DBHelper saveNewReview: review saved to network',a),b&&DBHelper.saveIdbStore('reviews',b),b}).catch(b=>console.log('Error saving review',b)):DBHelper.saveIdbStore('outbox',a).then(b=>{return console.log('DBHelper saveNewReview: offline review saved to outbox',b,a),a}).catch(b=>console.log('Error saving review to outbox',b))}static saveToNetwork(a,b,c){const d=DBHelper.DATABASE_URL+a,e={method:b,mode:'cors',headers:{'Content-Type':'application/json'},body:JSON.stringify(c)};return fetch(d,e).then(f=>f.json()).then(f=>{return f}).catch(f=>console.error('Error saving reviews',f))}static toggleFavourite(a,b){DBHelper.loadIdbStore('restaurants',a).then(c=>{return c.is_favorite=b,c}).then(c=>DBHelper.saveIdbStore('restaurants',c)),DBHelper.saveToNetwork(`restaurants/${a}/?is_favorite=${b}`,'PUT')}static fetchRestaurantByCuisine(a,b){DBHelper.getRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.filter(f=>f.cuisine_type==a);b(null,e)}})}static fetchRestaurantByNeighborhood(a,b){DBHelper.getRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.filter(f=>f.neighborhood==a);b(null,e)}})}static fetchRestaurantByCuisineAndNeighborhood(a,b,c){DBHelper.getRestaurants((d,e)=>{if(d)c(d,null);else{let f=e;'all'!=a&&(f=f.filter(g=>g.cuisine_type==a)),'all'!=b&&(f=f.filter(g=>g.neighborhood==b)),c(null,f)}})}static fetchNeighborhoods(a){DBHelper.getRestaurants((b,c)=>{if(b)a(b,null);else{const d=c.map((f,g)=>c[g].neighborhood),e=d.filter((f,g)=>d.indexOf(f)==g);a(null,e)}})}static fetchCuisines(a){DBHelper.getRestaurants((b,c)=>{if(b)a(b,null);else{const d=c.map((f,g)=>c[g].cuisine_type),e=d.filter((f,g)=>d.indexOf(f)==g);a(null,e)}})}static urlForRestaurant(a){return`./restaurant.html?id=${a.id}`}static imageUrlForRestaurant(a){return`/img/${a.id}.jpg`}static mapMarkerForRestaurant(a,b){const c=new google.maps.Marker({position:a.latlng,title:a.name,url:DBHelper.urlForRestaurant(a),map:b,animation:google.maps.Animation.DROP});return c}static openDatabase(){return idb.open('mws-stage2',2,a=>{switch(console.log('openDatabase upgradeDb called',a),a.oldVersion){case 0:a.createObjectStore('restaurants',{keyPath:'id'}),a.createObjectStore('reviews',{keyPath:'id'});case 1:a.createObjectStore('outbox',{keyPath:'tempId',autoIncrement:!0});}})}static loadIdbStore(a,b){return DBHelper.openDatabase().then(c=>{if(c){const d=c.transaction(a),e=d.objectStore(a);return b?e.get(b):e.getAll()}})}static saveIdbStore(a,b){return b=[].concat(b||[]),DBHelper.openDatabase().then(c=>{const d=c.transaction(a,'readwrite'),e=d.objectStore(a);return b.forEach(f=>e.put(f)),d.complete}).then(()=>{savingRestaurants=!1,console.log(`DBHelper saveIdbStore: Data saved to IDB, store: ${a}`)})}static clearIdbStore(a){return DBHelper.openDatabase().then(b=>{const c=b.transaction(a,'readwrite');return c.objectStore(a).clear(),c.complete}).then(()=>console.log('DBHelper clearIdbStore: done'))}static processOutbox(){return navigator.onLine?DBHelper.loadIdbStore('outbox').then(a=>{a.map(b=>DBHelper.saveNewReview(b))}).then(()=>{return DBHelper.clearIdbStore('outbox'),Promise.resolve('DBHelper processOutbox: Outbox processed successfully')}).catch(a=>console.log('DBHelper processOutbox error: ',a)):(console.log('DBHelper processOutbox: No internet, rejecting'),Promise.reject('DBHelper processOutbox: No internet, try again later'))}}
